/**
 * Fix php-parser ( https://www.npmjs.com/package/php-parser ) nested simple style namespace together.
 * 
 * @link https://github.com/glayzzle/php-parser/issues/1165 Issue about this.
 */


'use strict';


import { JSONPath } from 'jsonpath-plus';
import _ from 'lodash';


export default class PHPNamespaceFixer {


    /**
     * @type {object}
     */
    #parsedCode = {};


    /**
     * @type {object}
     */
    #queried = {};


    /**
     * @type {Array}
     */
    #tmpNS = [];
    

    /**
     * PHP namespace fixer. Fix nested namespace generated by npm php-parser.
     * 
     * @param {object} parsedCode 
     */
    constructor(parsedCode) {
        if (typeof(parsedCode) !== 'object') {
            throw new Error('The argument `parsedCode` must be object.');
        }

        this.#parsedCode = parsedCode;
        this.#queried = JSONPath({path: '$.children..[?(@.kind=="namespace")]', json: parsedCode, ignoreEvalErrors: true});
    }// constructor


    /**
     * Do fix the nested namespaces.
     */
    fix() {
        for (let eachNS of this.#queried) {
            const queried = JSONPath({path: '$.children[?(@.kind=="namespace")]', json: eachNS, ignoreEvalErrors: true, resultType: 'path'});

            for (const eachQueried of queried) {
                let eachQueriedPath = JSONPath.toPathArray(eachQueried);
                if (!isNaN(eachQueriedPath.at(-1))) {
                    eachNS.children.splice(eachQueriedPath.at(-1), 1);
                }
            }

            this.#tmpNS.push(eachNS);
        }// endfor;
    }// fix


    /**
     * Get fixed result. Need to cal `fix()` method before this.
     * 
     * @returns {object}
     */
    getResult() {
        if (this.#tmpNS.length > 0) {
            this.#parsedCode.children = this.#tmpNS;
        }

        return this.#parsedCode;
    }// getResult


    /**
     * Static call for fix namespaces.
     * 
     * @param {object} parsedCode 
     * @returns {object}
     */
    static staticFixNamespaces(parsedCode) {
        const thisClass = new PHPNamespaceFixer(parsedCode);
        thisClass.fix();
        return thisClass.getResult();
    }// staticFixNamespaces


}// PHPNamespaceFixer
